---
import ArticleCard from "./ArticleCard.astro";
import type { ArticleProps } from '../utils/types';

function getRandomRGBColor(gate: number, dif: number) {
  const red		= Math.floor(gate + Math.random() * dif);
  const green = Math.floor(gate + Math.random() * dif);
  const blue 	= Math.floor(gate + Math.random() * dif);
  return `rgb(${red},${green},${blue})`;
}

const { articles } = Astro.props as { articles: ArticleProps[] };

const minColorGate = 180;
const maxColorGate = 255;
const diff = maxColorGate - minColorGate + 1;

const _cardColor = getRandomRGBColor(minColorGate, diff);
const _textColor = getRandomRGBColor(minColorGate / 3.5, diff);
---

<div class="flex flex-col items-center justify-between">
  <div class="article-card-list h-3/4">
    {
      articles?.map((article, index) => (
        <div class="px-4 py-2">
          <ArticleCard
            article   = {  article   }
            cardColor = { _cardColor }
            textColor = { _textColor }
          />
        </div>
      ))
      ?? <p>There is no articles</p>
    }
  </div>
</div>

<style>
  .article-card-list {
    display: flex;
    align-items: center;
    overflow-x: auto;
    overflow-y: hidden;
    width: 90vw;
  }

  .article-card-list::-webkit-scrollbar {
    height: 0px;
  }
  .article-card-list::-webkit-scrollbar-track {
    background: transparent;
  }
  .article-card-list::-webkit-scrollbar-thumb {
    background: transparent;
    border-radius: 15px;
  }
  .article-card-list::-webkit-scrollbar-thumb:hover {
    background: transparent;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Получаем все элементы с классом .article-card-list
  const scrollContainers = document.querySelectorAll<HTMLElement>('.article-card-list');

  // Применяем логику прокрутки к каждому контейнеру
  scrollContainers.forEach((scrollContainer) => {
    let isDown: boolean = false;
    let startX: number;
    let scrollLeft: number;

    scrollContainer.addEventListener('mousedown', (e: MouseEvent) => {
      isDown = true;
      scrollContainer.classList.add('active');
      startX = e.pageX - scrollContainer.offsetLeft;
      scrollLeft = scrollContainer.scrollLeft;
    });

    scrollContainer.addEventListener('mouseleave', () => {
      isDown = false;
      scrollContainer.classList.remove('active');
    });

    scrollContainer.addEventListener('mouseup', () => {
      isDown = false;
      scrollContainer.classList.remove('active');
    });

    scrollContainer.addEventListener('mousemove', (e: MouseEvent) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - scrollContainer.offsetLeft;
      const walk: number = (x - startX) * 3;
      scrollContainer.scrollLeft = scrollLeft - walk;
    });
  });
});
</script>